name: Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build-and-release:
    name: Build and Release Windows
    runs-on: windows-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v5

    - name: Install Vulkan SDK
      shell: powershell
      run: |
        # Download and install Vulkan SDK
        $url = "https://sdk.lunarg.com/sdk/download/1.3.290.0/windows/VulkanSDK-1.3.290.0-Installer.exe"
        $output = "$env:TEMP\VulkanSDK.exe"
        Invoke-WebRequest -Uri $url -OutFile $output
        Start-Process -FilePath $output -ArgumentList "/S" -Wait

        # Add Vulkan to PATH
        $vulkanPath = "C:\VulkanSDK\1.3.290.0\Bin"
        echo "$vulkanPath" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: Setup vcpkg and install dependencies
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgDirectory: '${{ github.workspace }}/vcpkg'
        vcpkgGitURL: 'https://github.com/Microsoft/vcpkg.git'
        vcpkgGitCommitId: 'a923876489993098f7b53608377424175227912d'
        runVcpkgInstall: true
        vcpkgJsonGlob: '**/vcpkg.json'

    - name: Configure CMake
      shell: powershell
      run: |
        cmake -S . -B build -G "Visual Studio 17 2022" -A x64 -DCMAKE_TOOLCHAIN_FILE="vcpkg/scripts/buildsystems/vcpkg.cmake"

    - name: Build
      shell: powershell
      run: |
        cmake --build build --config Release

    - name: Package artifacts
      shell: powershell
      run: |
        Write-Host "=== Looking for compiled application files ==="
        Get-ChildItem -Path build -Recurse -Include "*.exe" | Format-Table Name, FullName
        Get-ChildItem -Path build -Recurse -Include "*.spv" | Format-Table Name, FullName

        Write-Host "=== Creating release package ==="
        New-Item -ItemType Directory -Path release -Force

        Write-Host "=== Copying application binary ==="
        $exeFiles = Get-ChildItem -Path "build\Release" -Filter "*.exe"
        if ($exeFiles) {
            foreach ($file in $exeFiles) {
                Copy-Item $file.FullName "release\"
                Write-Host "Copied: $($file.Name)"
            }
        } else {
            Write-Host "ERROR: No .exe files found in build\Release"
            Get-ChildItem "build\Release"
            exit 1
        }

        Write-Host "=== Copying compiled shaders ==="
        $shaderFiles = Get-ChildItem -Path "build" -Recurse -Filter "*.spv"
        if ($shaderFiles) {
            foreach ($file in $shaderFiles) {
                Copy-Item $file.FullName "release\"
                Write-Host "Copied shader: $($file.Name)"
            }
        } else {
            Write-Host "WARNING: No .spv shader files found"
        }

        Write-Host "=== Copying documentation ==="
        if (Test-Path "LICENSE*") { Copy-Item "LICENSE*" release\ }
        if (Test-Path "README.md") { Copy-Item "README.md" release\ }
        if (Test-Path "CHANGELOG*") { Copy-Item "CHANGELOG*" release\ }

        Write-Host "=== Creating README for users ==="
        @"
Vulkan Learning Project - Installation Instructions
================================================

CONTENTS:
- VulkanApp.exe          : Main application executable
- shader.vert.spv        : Compiled vertex shader
- shader.frag.spv        : Compiled fragment shader
- README.md              : Project documentation
- Any additional DLLs    : Runtime dependencies

SYSTEM REQUIREMENTS:
- Windows 10/11 x64
- Vulkan-capable GPU (NVIDIA GTX 600+, AMD GCN+, Intel Iris Pro)
- Vulkan Runtime (usually installed with GPU drivers)
- Microsoft Visual C++ Redistributable 2022

INSTALLATION:
1. Extract all files to a folder of your choice
2. Ensure shader files (*.spv) are in the same directory as VulkanApp.exe
3. Run VulkanApp.exe

EXPECTED RESULT:
A window displaying a rotating 3D cube with lighting at 60+ FPS.

TROUBLESHOOTING:
- If the app crashes immediately: Update your GPU drivers
- If you see validation errors: Install Vulkan SDK for development
- If performance is poor: Check GPU supports Vulkan 1.0+

For more information, see the full README.md file.
"@ | Out-File -FilePath "release\INSTALL.txt" -Encoding utf8

        Write-Host "=== Contents of release directory ==="
        Get-ChildItem -Path release -Recurse | Format-Table Name, Length

    - name: Upload Release Assets
      uses: actions/upload-artifact@v4
      with:
        name: vulkan-app-windows
        path: release/

  create-release:
    name: Create GitHub Release
    needs: build-and-release
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v5

    - name: Download all artifacts
      uses: actions/download-artifact@v5
      with:
        path: artifacts

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          artifacts/**/*
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}